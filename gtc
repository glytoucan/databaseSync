#!/usr/bin/groovy
@GrabResolver(name='glycoinfo', root='http://nexus.glycoinfo.org/content/groups/public/')
@GrabResolver(name='glycoinfo-snapshots', root='http://nexus.glycoinfo.org/content/repositories/snapshots/')
//@Grab('org.glytoucan:client:1.2.5-TOCO-SNAPSHOT')
@Grab( group='org.glytoucan',
       module='client',
       version='1.2.5-TOCO-SNAPSHOT',
       changing=true )
@Grab('org.apache.commons:commons-csv:1.2')
import org.glytoucan.client.AntiSpringJavaRest
def cli = new CliBuilder(
   usage: 'gtc -s sequence or -c csvFileName -u contributorId -a apiKey -o outputFormat ',
   header: '\nAvailable options (use -h for help):\n',
   footer: '\nInformation provided via above options is used to generate printed string.\n')
import org.apache.commons.cli.Option
cli.with
{
   h(longOpt: 'help', 'usage information', required: false)
   s(longOpt: 'sequence', 'glycan structure sequence', args: 1, required: false)
   c(longOpt: 'csvFileName', 'CSV file name', args: 1, required: false)
   u(longOpt: 'contributorId', 'Contribuor Id', args: 1, required: true)
   a(longOpt: 'apiKey', 'API Key', args: 1, required: true)
   p(longOpt: 'partnerId', 'partnerId', args: 1, required: false)
   o(longOpt: 'outputFormat', 'output format', args: 1, required: false)
   t(longOpt: 'tsvFileName', 'TSV file name', args: 1, required: false)
}
def opt = cli.parse(args)
if (!opt) return
if (opt.h) cli.usage()
def sequence = opt.s
def csvFileName = opt.c
def contributorId = opt.u
def apiKey = opt.a
def partnerId = opt.p
def oFormat = opt.o
def tsvFileName = opt.t
def asjr = new AntiSpringJavaRest()

if (oFormat != 'tsv' && oFormat != 'csv') {
  println "User ID: ${contributorId}"
  println "Api Key: ${apiKey}"
}

if (sequence) {
        if (oFormat != 'tsv' && oFormat != 'csv') {
          println "Registering sequence: ${sequence}"
        }
        String result;
        if (partnerId) {
            if (oFormat != 'tsv' && oFormat != 'csv') {
                println "Partner Id: ${partnerId}"
            }
            result = asjr.register(sequence, partnerId, contributorId, apiKey)
        } else {
            result = asjr.register(sequence, contributorId, apiKey)
        }
        
        if (oFormat == 'tsv') {
            if (partnerId) {
                println "${result}\t${partnerId}\t${sequence}";
            }
            else {
                println "${result}\t${sequence}";
            }
        }
        else if (oFormat == 'csv') {
          if (partnerId) {
                println "\"${result}\",\"${partnerId}\",\"${sequence}\"";
          }
          else {
                println "\"${result}\",\"${sequence}\"";
          }
        }
        else {
          if (partnerId) {  
                println "Accession Number of ${partnerId}: ${sequence} is ${result}";
          }
          else {
                println "Accession Number of ${sequence} is ${result}";
          }
        }
}
import org.apache.commons.csv.CSVParser
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import static org.apache.commons.csv.CSVFormat.*
import java.nio.file.Paths
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.List;

final def TAB = '\t'

if ((csvFileName) || (tsvFileName)) {

    if (oFormat != 'tsv' && oFormat != 'csv') {
      if (oFormat == 'csv') {
        println "Reading file: ${csvFileName}"
      }
      if (oFormat == 'tsv') {
        println "Reading file: ${tsvFileName}"
      }
    }
    
    List<List<String>> glycanList = new ArrayList<ArrayList<String>>();
    try {

        if (csvFileName) { 
            Paths.get(csvFileName).withReader { reader ->
            CSVParser csv = new CSVParser(reader, DEFAULT.withHeader())

                for (record in csv.iterator()) {
                    if (record.size() == 2) {
                        glycanList.push( [record.get(0), record.get(1) ] )
                    }
                    else if (record.size() == 1) {
                        glycanList.push( [record.get(0) ] )
                    }
                }
            }
        }
        if (tsvFileName) { 
            new File(tsvFileName).eachWithIndex {
                String line, int i -> 
                if (i == 0) { return }
                else {

                    contents = line.split(TAB) 
                    if (contents.size() == 2) {
                        glycanList.push( [ contents[0], contents[1] ])
                    }
                    else if (contents.size() == 1) {
                        glycanList.push( [ contents[0] ])
                    }
                }
            }
        }

    } catch (IOException e) {
      e.printStackTrace();
    }

    for (List<String> glycan : glycanList) {

            if (glycan.size() == 2) {

                partnerId = glycan[0]
                sequence = glycan[1]
            }
            if (glycan.size() == 1) {
                sequence = glycan[0]
            }
            

                
                if (oFormat != 'tsv' && oFormat != 'csv') {
                  println "\t" + "contributorId" + "\t" + contributorId
                  println "\t" + "apiKey" + "\t" + apiKey
                  //println "\t" + partnerId + "\t" + sequence
                  println "Read sequence: " + sequence
                  //println "Read partnerDBId: " + partnerDBId
                }
              
                if (sequence) {

                    if (oFormat != 'tsv' && oFormat != 'csv') {
                        println "Registering sequence: " + sequence
                    }  

                    if (partnerId) {
                        if (oFormat != 'tsv' && oFormat != 'csv') {
                            println "Partner Id: ${partnerId}"
                        }

                        try {
                            result = asjr.register(sequence, partnerId, contributorId, apiKey)
                        }
                        catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    else {
                        try {
                            result = asjr.register(sequence, contributorId, apiKey)
                        } 
                        catch (Exception e) {
                            e.printStackTrace();
                        }
                    }


                    
                    if (oFormat == 'tsv') {
                         if (partnerId) {
                                println "${partnerId}\t${result}\t${sequence}";
                         }
                         else {
                                println "${result}\t${sequence}";
                         }
                    }
                    else if (oFormat == 'csv') {
                        if (partnerId) {
                                println "\"${partnerId}\",\"${result}\",\"${sequence}\"";
                        }
                        else {
                                println "\"${result}\",\"${sequence}\"";
                        }
                    }
                    else {
                        if (partnerId) {
                            println "Accession Number of ${partnerId} (WURCS: ${sequence}) is ${result}";
                        }
                        else {
                            println "Accession Number of ${sequence} is ${result}";
                        }
                    }
                }
            //}
            partnerId = false;
            sequence = false;
    }
}