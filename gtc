#!/usr/bin/groovy
@GrabResolver(name='glycoinfo', root='http://nexus.glycoinfo.org/content/groups/public/')
@GrabResolver(name='glycoinfo-snapshots', root='http://nexus.glycoinfo.org/content/repositories/snapshots/')
//@Grab('org.glytoucan:client:1.2.5-TOCO-SNAPSHOT')
@Grab( group='org.glytoucan', 
       module='client', 
       version='1.2.5-TOCO-SNAPSHOT', 
       changing=true ) 
@Grab('org.apache.commons:commons-csv:1.2')

import org.glytoucan.client.AntiSpringJavaRest

def cli = new CliBuilder(
   usage: 'gtc -s sequence or -c csvFileName -u contributorId -a apiKey ',
   header: '\nAvailable options (use -h for help):\n',
   footer: '\nInformation provided via above options is used to generate printed string.\n')

import org.apache.commons.cli.Option

cli.with
{
   h(longOpt: 'help', 'usage information', required: false)
   s(longOpt: 'sequence', 'glycan structure sequence', args: 1, required: false)
   c(longOpt: 'csvFileName', 'CSV file name', args: 1, required: false)
   u(longOpt: 'contributorId', 'Contribuor Id', args: 1, required: true)
   a(longOpt: 'apiKey', 'API Key', args: 1, required: true)
   p(longOpt: 'partnerId', 'partnerId', args: 1, required: false)
}
def opt = cli.parse(args)

if (!opt) return
if (opt.h) cli.usage()

def sequence = opt.s
def csvFileName = opt.c
def contributorId = opt.u
def apiKey = opt.a
def partnerId = opt.p
def asjr = new AntiSpringJavaRest()
println "User ID: ${contributorId}"
println "Api Key: ${apiKey}"

if (sequence) {
	println "Registering sequence: ${sequence}"

	String result;
	if (partnerId) {
		println "Partner Id: ${partnerId}"
		result = asjr.register(sequence, partnerId, contributorId, apiKey)
	} else {
		result = asjr.register(sequence, contributorId, apiKey)
	}

	println "Accession Number of ${sequence} is ${result}";
}

import org.apache.commons.csv.CSVParser
import static org.apache.commons.csv.CSVFormat.*
import java.nio.file.Paths

if (csvFileName) {
	println "Reading file: ${csvFileName}"

	def listing = []

	Paths.get(csvFileName).withReader { reader ->
	    CSVParser csv = new CSVParser(reader, DEFAULT.withHeader())
 
	    for (record in csv.iterator()) {
        	listing << (record.toMap() as Expando)
    	    }
	}
	for (Expando mapLine : listing) {
		Map props = mapLine.getProperties();
		for (fieldProp in props) {
  			println "column " + fieldProp.key
			println "Registering sequence: " + fieldProp.value
			if (partnerId) {
				println "Partner Id: ${partnerId}"
				result = asjr.register(fieldProp.value, partnerId, contributorId, apiKey)
			} else {
				result = asjr.register(fieldProp.value, contributorId, apiKey)
			}
			println "Accession Number of ${fieldProp.value} is ${result}";
		}
	}
}
